// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainmon/chainmon.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonClass int32

const (
	MonClass_BEAST   MonClass = 0
	MonClass_INSET   MonClass = 1
	MonClass_AQUATIC MonClass = 2
	MonClass_PLANT   MonClass = 3
	MonClass_METAL   MonClass = 4
	MonClass_DRAGON  MonClass = 5
)

var MonClass_name = map[int32]string{
	0: "BEAST",
	1: "INSET",
	2: "AQUATIC",
	3: "PLANT",
	4: "METAL",
	5: "DRAGON",
}

var MonClass_value = map[string]int32{
	"BEAST":   0,
	"INSET":   1,
	"AQUATIC": 2,
	"PLANT":   3,
	"METAL":   4,
	"DRAGON":  5,
}

func (x MonClass) String() string {
	return proto.EnumName(MonClass_name, int32(x))
}

func (MonClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_593bd213e1bfc84a, []int{0}
}

type Phase int32

const (
	Phase_BIT      Phase = 0
	Phase_BYTE     Phase = 1
	Phase_KILOBYTE Phase = 2
	Phase_MEGABYTE Phase = 3
	Phase_GIGABYTE Phase = 4
	Phase_TERABYTE Phase = 5
)

var Phase_name = map[int32]string{
	0: "BIT",
	1: "BYTE",
	2: "KILOBYTE",
	3: "MEGABYTE",
	4: "GIGABYTE",
	5: "TERABYTE",
}

var Phase_value = map[string]int32{
	"BIT":      0,
	"BYTE":     1,
	"KILOBYTE": 2,
	"MEGABYTE": 3,
	"GIGABYTE": 4,
	"TERABYTE": 5,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_593bd213e1bfc84a, []int{1}
}

type Chainmon struct {
	Creator    string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MonClass   MonClass `protobuf:"varint,4,opt,name=monClass,proto3,enum=williamfeng323.chainmon.chainmon.MonClass" json:"monClass,omitempty"`
	Phase      Phase    `protobuf:"varint,5,opt,name=phase,proto3,enum=williamfeng323.chainmon.chainmon.Phase" json:"phase,omitempty"`
	Species    uint64   `protobuf:"varint,6,opt,name=species,proto3" json:"species,omitempty"`
	Databricks int64    `protobuf:"varint,7,opt,name=databricks,proto3" json:"databricks,omitempty"`
}

func (m *Chainmon) Reset()         { *m = Chainmon{} }
func (m *Chainmon) String() string { return proto.CompactTextString(m) }
func (*Chainmon) ProtoMessage()    {}
func (*Chainmon) Descriptor() ([]byte, []int) {
	return fileDescriptor_593bd213e1bfc84a, []int{0}
}
func (m *Chainmon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chainmon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chainmon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chainmon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chainmon.Merge(m, src)
}
func (m *Chainmon) XXX_Size() int {
	return m.Size()
}
func (m *Chainmon) XXX_DiscardUnknown() {
	xxx_messageInfo_Chainmon.DiscardUnknown(m)
}

var xxx_messageInfo_Chainmon proto.InternalMessageInfo

func (m *Chainmon) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Chainmon) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chainmon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chainmon) GetMonClass() MonClass {
	if m != nil {
		return m.MonClass
	}
	return MonClass_BEAST
}

func (m *Chainmon) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_BIT
}

func (m *Chainmon) GetSpecies() uint64 {
	if m != nil {
		return m.Species
	}
	return 0
}

func (m *Chainmon) GetDatabricks() int64 {
	if m != nil {
		return m.Databricks
	}
	return 0
}

func init() {
	proto.RegisterEnum("williamfeng323.chainmon.chainmon.MonClass", MonClass_name, MonClass_value)
	proto.RegisterEnum("williamfeng323.chainmon.chainmon.Phase", Phase_name, Phase_value)
	proto.RegisterType((*Chainmon)(nil), "williamfeng323.chainmon.chainmon.Chainmon")
}

func init() { proto.RegisterFile("chainmon/chainmon.proto", fileDescriptor_593bd213e1bfc84a) }

var fileDescriptor_593bd213e1bfc84a = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0xaf, 0x93, 0x40,
	0x14, 0xc5, 0x3b, 0xfc, 0x69, 0x79, 0x57, 0xf3, 0x42, 0x26, 0x26, 0x4e, 0x5c, 0x10, 0xe2, 0xc6,
	0xa6, 0x0b, 0x48, 0x1e, 0x6b, 0x17, 0x50, 0xb1, 0x21, 0x96, 0xf6, 0x39, 0x0f, 0x17, 0xba, 0x9b,
	0x52, 0xa4, 0x13, 0x0b, 0x43, 0x00, 0xa3, 0x7e, 0x04, 0x77, 0x7e, 0x2c, 0x97, 0x6f, 0xe9, 0xd2,
	0xb4, 0x5f, 0xc4, 0xcc, 0xb4, 0x54, 0x5d, 0xbd, 0xdd, 0xf9, 0x5d, 0xce, 0xb9, 0x39, 0x4c, 0x2e,
	0x3c, 0xcd, 0x77, 0x8c, 0xd7, 0x95, 0xa8, 0xfd, 0x41, 0x78, 0x4d, 0x2b, 0x7a, 0x81, 0xdd, 0x2f,
	0x7c, 0xbf, 0xe7, 0xac, 0xfa, 0x58, 0xd4, 0x65, 0x70, 0x13, 0x78, 0x97, 0xcf, 0x83, 0x78, 0xf6,
	0xa4, 0x14, 0xa5, 0x50, 0x66, 0x5f, 0xaa, 0x53, 0xee, 0xf9, 0x77, 0x0d, 0xac, 0xf9, 0xd9, 0x82,
	0x09, 0x4c, 0xf2, 0xb6, 0x60, 0xbd, 0x68, 0x09, 0x72, 0xd1, 0xf4, 0x8a, 0x0e, 0x88, 0xaf, 0x41,
	0xe3, 0x5b, 0xa2, 0xb9, 0x68, 0x6a, 0x50, 0x8d, 0x6f, 0x31, 0x06, 0xa3, 0x66, 0x55, 0x41, 0x74,
	0x65, 0x53, 0x1a, 0xbf, 0x06, 0xab, 0x12, 0xf5, 0x7c, 0xcf, 0xba, 0x8e, 0x18, 0x2e, 0x9a, 0x5e,
	0xdf, 0xcc, 0xbc, 0x87, 0x5a, 0x79, 0xe9, 0x39, 0x41, 0x2f, 0x59, 0xfc, 0x12, 0xcc, 0x66, 0xc7,
	0xba, 0x82, 0x98, 0x6a, 0xc9, 0x8b, 0x87, 0x97, 0xdc, 0x4a, 0x3b, 0x3d, 0xa5, 0xe4, 0x4f, 0x74,
	0x4d, 0x91, 0xf3, 0xa2, 0x23, 0x63, 0xd5, 0x77, 0x40, 0xec, 0x00, 0x6c, 0x59, 0xcf, 0x36, 0x2d,
	0xcf, 0x3f, 0x75, 0x64, 0xe2, 0xa2, 0xa9, 0x4e, 0xff, 0x99, 0xcc, 0xd6, 0x60, 0x0d, 0x75, 0xf0,
	0x15, 0x98, 0x51, 0x1c, 0xde, 0x65, 0xf6, 0x48, 0xca, 0x64, 0x75, 0x17, 0x67, 0x36, 0xc2, 0x8f,
	0x60, 0x12, 0xbe, 0x7d, 0x17, 0x66, 0xc9, 0xdc, 0xd6, 0xe4, 0xfc, 0x76, 0x19, 0xae, 0x32, 0x5b,
	0x97, 0x32, 0x8d, 0xb3, 0x70, 0x69, 0x1b, 0x18, 0x60, 0xfc, 0x8a, 0x86, 0x8b, 0xf5, 0xca, 0x36,
	0x67, 0x14, 0x4c, 0x55, 0x0d, 0x4f, 0x40, 0x8f, 0x12, 0xb9, 0xcb, 0x02, 0x23, 0x7a, 0x9f, 0xc5,
	0x36, 0xc2, 0x8f, 0xc1, 0x7a, 0x93, 0x2c, 0xd7, 0x8a, 0x34, 0x49, 0x69, 0xbc, 0x08, 0x15, 0xe9,
	0x92, 0x16, 0xc9, 0x99, 0x0c, 0x49, 0x59, 0x4c, 0x4f, 0x64, 0x46, 0xe9, 0xcf, 0x83, 0x83, 0xee,
	0x0f, 0x0e, 0xfa, 0x7d, 0x70, 0xd0, 0x8f, 0xa3, 0x33, 0xba, 0x3f, 0x3a, 0xa3, 0x5f, 0x47, 0x67,
	0xf4, 0x21, 0x28, 0x79, 0xbf, 0xfb, 0xbc, 0xf1, 0x72, 0x51, 0xf9, 0xff, 0x3f, 0xd9, 0xe5, 0x58,
	0xfc, 0xaf, 0x7f, 0x65, 0xff, 0xad, 0x29, 0xba, 0xcd, 0x58, 0x9d, 0x41, 0xf0, 0x27, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0x03, 0x71, 0x81, 0x59, 0x02, 0x00, 0x00,
}

func (m *Chainmon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chainmon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chainmon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Databricks != 0 {
		i = encodeVarintChainmon(dAtA, i, uint64(m.Databricks))
		i--
		dAtA[i] = 0x38
	}
	if m.Species != 0 {
		i = encodeVarintChainmon(dAtA, i, uint64(m.Species))
		i--
		dAtA[i] = 0x30
	}
	if m.Phase != 0 {
		i = encodeVarintChainmon(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x28
	}
	if m.MonClass != 0 {
		i = encodeVarintChainmon(dAtA, i, uint64(m.MonClass))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainmon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintChainmon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintChainmon(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainmon(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainmon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chainmon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovChainmon(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovChainmon(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainmon(uint64(l))
	}
	if m.MonClass != 0 {
		n += 1 + sovChainmon(uint64(m.MonClass))
	}
	if m.Phase != 0 {
		n += 1 + sovChainmon(uint64(m.Phase))
	}
	if m.Species != 0 {
		n += 1 + sovChainmon(uint64(m.Species))
	}
	if m.Databricks != 0 {
		n += 1 + sovChainmon(uint64(m.Databricks))
	}
	return n
}

func sovChainmon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainmon(x uint64) (n int) {
	return sovChainmon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chainmon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainmon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chainmon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chainmon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonClass", wireType)
			}
			m.MonClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonClass |= MonClass(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Species", wireType)
			}
			m.Species = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Species |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Databricks", wireType)
			}
			m.Databricks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Databricks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainmon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainmon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainmon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainmon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainmon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainmon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainmon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainmon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainmon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainmon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainmon = fmt.Errorf("proto: unexpected end of group")
)
